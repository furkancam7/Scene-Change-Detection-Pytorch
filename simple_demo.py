"""
Basit Demo - Manuel Komutlarla Sahne DeÄŸiÅŸikliÄŸi Tespiti
"""

import os
import subprocess
import sys

def run_simple_demo():
    """
    Basit demo - adÄ±m adÄ±m manuel komutlar
    """
    print(" BASIT SAHNE DEÄžÄ°ÅžÄ°KLÄ°ÄžÄ° TESPÄ°TÄ° DEMO")
    print("=" * 45)
    
    
    model_path = find_best_model()
    if not model_path:
        print(" Model dosyasÄ± bulunamadÄ±!")
        print("Ã–nce eÄŸitim yapÄ±n: python train.py --model unet --epochs 10")
        return False
    
    print(f" Model bulundu: {model_path}")
    
    
    input_dir = "dataset/input"
    if not os.path.exists(input_dir):
        print(f" Input klasÃ¶rÃ¼ bulunamadÄ±: {input_dir}")
        return False
    
    
    image_files = sorted([f for f in os.listdir(input_dir) if f.endswith('.jpg')])[:3]
    
    if not image_files:
        print(" Test edilecek gÃ¶rÃ¼ntÃ¼ bulunamadÄ±!")
        return False
    
    print(f"ðŸ“¸ {len(image_files)} gÃ¶rÃ¼ntÃ¼ test edilecek:")
    for i, img in enumerate(image_files, 1):
        print(f"   {i}. {img}")
    
    print("\n" + "â”€" * 45)
    input("Devam etmek iÃ§in Enter'a basÄ±n...")
    
    
    for i, image_file in enumerate(image_files, 1):
        print(f"\n  TEST {i}/{len(image_files)}: {image_file}")
        print("â”€" * 30)
        
        image_path = os.path.join(input_dir, image_file).replace('\\', '/')
        
        
        cmd = f'python inference.py --model_path "{model_path}" --single_image "{image_path}" --threshold 0.5'
        
        print(f"Ã‡alÄ±ÅŸtÄ±rÄ±lan komut:")
        print(f"   {cmd}")
        print()
        
        try:
            
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                output = result.stdout
                print(" BaÅŸarÄ±lÄ±!")
                
                
                for line in output.split('\n'):
                    if "DeÄŸiÅŸiklik YÃ¼zdesi:" in line:
                        percentage = line.split(':')[1].strip()
                        print(f"    DeÄŸiÅŸiklik: {percentage}")
                    elif "GÃ¼ven Skoru:" in line:
                        confidence = line.split(':')[1].strip()
                        print(f"    GÃ¼ven: {confidence}")
                
                
                if "inference_results" in output:
                    print("    GÃ¶rsel sonuÃ§lar oluÅŸturuldu!")
                
            else:
                print(" Hata oluÅŸtu:")
                print(f"   Return code: {result.returncode}")
                print(f"   Stderr: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            print(" Zaman aÅŸÄ±mÄ± - 60 saniye geÃ§ti")
        except Exception as e:
            print(f" Beklenmeyen hata: {e}")
    
    print("\n" + "=" * 45)
    print(" DEMO TAMAMLANDI!")
    
    
    show_results_summary()
    
    return True

def find_best_model():
    """En iyi model dosyasÄ±nÄ± bul"""
    model_candidates = [
        "checkpoints/best_model.pth",
        "checkpoints/last_checkpoint.pth"
    ]
    
    for model_path in model_candidates:
        if os.path.exists(model_path):
            return model_path
    
    
    if os.path.exists("checkpoints"):
        pth_files = [f for f in os.listdir("checkpoints") if f.endswith('.pth')]
        if pth_files:
            latest_file = max(pth_files, key=lambda x: os.path.getctime(os.path.join("checkpoints", x)))
            return os.path.join("checkpoints", latest_file)
    
    return None

def show_results_summary():
    """SonuÃ§ Ã¶zeti gÃ¶ster"""
    print("\n SONUÃ‡ Ã–ZETÄ°:")
    print("â”€" * 25)
    
    
    model_path = find_best_model()
    if model_path:
        model_size = os.path.getsize(model_path) / (1024*1024)
        print(f" Model: {os.path.basename(model_path)} ({model_size:.1f} MB)")
    
    
    if os.path.exists("inference_results"):
        files = os.listdir("inference_results")
        prediction_files = [f for f in files if "_prediction.png" in f]
        overlay_files = [f for f in files if "_overlay.png" in f]
        report_files = [f for f in files if "_report.txt" in f]
        
        print(f" GÃ¶rsel sonuÃ§lar: {len(prediction_files)} adet")
        print(f" Overlay'ler: {len(overlay_files)} adet")  
        print(f" Raporlar: {len(report_files)} adet")
        
        if prediction_files:
            print(f"\n SonuÃ§larÄ± gÃ¶rmek iÃ§in: inference_results/ klasÃ¶rÃ¼ne bakÄ±n")
            print("   Dosya tÃ¼rleri:")
            print("   - *_prediction.png : DeÄŸiÅŸiklik heatmap'i")
            print("   - *_overlay.png    : KÄ±rmÄ±zÄ± deÄŸiÅŸiklik overlay'i")  
            print("   - *_mask.png       : Binary maske")
            print("   - *_report.txt     : DetaylÄ± rapor")
    
   
    if os.path.exists("runs"):
        run_dirs = [d for d in os.listdir("runs") if os.path.isdir(os.path.join("runs", d))]
        if run_dirs:
            print(f"TensorBoard loglarÄ±: {len(run_dirs)} eÄŸitim")
            print("   GÃ¶rÃ¼ntÃ¼lemek iÃ§in: tensorboard --logdir=runs")
    
    print("\n Sahne deÄŸiÅŸikliÄŸi tespiti sistemi Ã§alÄ±ÅŸÄ±yor!")

def quick_inference_test():
    """HÄ±zlÄ± tek gÃ¶rÃ¼ntÃ¼ testi"""
    print(" HIZLI TEK GÃ–RÃœNTÃœ TESTÄ°")
    print("=" * 30)
    
    model_path = find_best_model()
    if not model_path:
        print(" Model bulunamadÄ±!")
        return
    
    
    test_image = "dataset/input/in000001.jpg"
    if not os.path.exists(test_image):
        print(f" Test gÃ¶rÃ¼ntÃ¼sÃ¼ bulunamadÄ±: {test_image}")
        return
    
    print(f"  Test gÃ¶rÃ¼ntÃ¼sÃ¼: {test_image}")
    print(f" Model: {model_path}")
    
    cmd = f'python inference.py --model_path "{model_path}" --single_image "{test_image}"'
    print(f"\n Komut: {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, timeout=30)
        if result.returncode == 0:
            print(" Test baÅŸarÄ±lÄ±!")
        else:
            print(f" Test baÅŸarÄ±sÄ±z (code: {result.returncode})")
    except subprocess.TimeoutExpired:
        print(" Zaman aÅŸÄ±mÄ±")
    except Exception as e:
        print(f" Hata: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "quick":
        quick_inference_test()
    else:
        run_simple_demo()